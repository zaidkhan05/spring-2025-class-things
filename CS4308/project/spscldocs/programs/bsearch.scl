import "scl.h"
/* Program: bsearch.scl
s    Binary search.
   J Garrido 12-2-2021
*/
forward declarations
function bsearch2 return type integer
 parameters 
       myarr array [] of type double, keyval of type double, 
	   low of type integer, high of type integer
	   
global declarations
constants
   define ARRAY_SIZE of type integer = 50

implementations

description
      This is the main logic of the program
      */
function main is  
    variables
      define marray array [ARRAY_SIZE] of type double
	  define marrval of type double
      define mkey of type double
	  define mlow of type integer
	  define mhigh of type integer
      define kelements of type integer
      define j of type integer
	  define kindex of type integer
    begin
      input "Number of elements in array: ", kelements
	  input "Enter value of key: ", mkey
      for j = 0 to kelements - 1 do
	     
         input "Enter element value: ", marrval 
		 set marray[j] = marrval
         // display "value entered: ", marray[j]
      endfor  
      input "Enter low index: ", mlow
	  input "Enter high index: ", mhigh
      // call the function to find key value	  
      set kindex = bsearch2(marray, mkey, mlow, mhigh)
      if kindex >= 0 then 	  
         display "Key found in array, index: ", kindex
	  else
	     display "Key not found"
	  endif
      exit    
  endfun main 
// 
description
  This function implements a binary search
  of a sorted array using a key value. The result is the index value
  of the element found, or -1 if none found */
function bsearch2 return type integer
  parameters sarray array [] of type double, keyval of type double, 
     lowidx of type integer, highidx of type integer is
constants
    define TOLER of type double = 0.0001
variables
    define mindex of type integer 
    define mididx of type integer
begin
    set mindex = -1
    while lowidx <= highidx do
        set mididx = lowidx  + ((highidx - lowidx) / 2)
        if sarray[mididx] < keyval then
            set lowidx = mididx + 1
        elseif sarray[mididx] > keyval then
            set highidx = mididx - 1
        elseif abs(sarray[mididx] - keyval) <= TOLER
		    then
               set mindex = mididx
			   return mindex
        endif
    endwhile
    return mindex
endfun bsearch2